#include <iostream>
#include "network_Can_generated.h" // This was generated by `flatc`.
#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/util.cpp"
#include "flatbuffers/idl_parser.cpp"
#include "flatbuffers/idl_gen_text.cpp"
using namespace NetworkModels::CAN; // Specified in the schema.

int main(int /*argc*/, const char * /*argv*/[]) {

    // Create a `FlatBufferBuilder`, which will be used to create our
    flatbuffers::FlatBufferBuilder builder(1024);
    
  //  std::string schemafile;
  //  flatbuffers::LoadFile("network_Can.fbs".c_str(),false, &schemafile);

  std::string schemafile;
  std::string jsonfile;
  bool ok = flatbuffers::LoadFile("network_Can.fbs", false, &schemafile) ;

    int frameId = 12;
    uint8_t payload_Data[] = {0,1,2,3};
    auto payload_vector = builder.CreateVector(payload_Data,4);
    auto payloadLen = size_t(payload_Data);
    bool rtr = 0;
    MessageTiming m ;
    MessageTiming v ={m.send_request(),m.arbitration(),m.reception()};

    auto frame1 = CreateFrame(builder,frameId,payload_vector,payloadLen,rtr,FrameType_extended_fram);
    auto meta_frame = CreateMetaFrame(builder,BufferStatus_MAX,BufferDirection_Rx,CanFDIndicator_canFD,frame1,&v);

    std::vector<flatbuffers::Offset<MetaFrame>> MetaFrameVector;
    MetaFrameVector.push_back(meta_frame);
    auto metaFrame = builder.CreateVector(MetaFrameVector);
    auto fileR = CreateRegisterFile(builder,metaFrame);

    builder.Finish(fileR);

    uint8_t *buf = builder.GetBufferPointer();
    int size = builder.GetSize(); 


    auto network = GetRegisterFile(buf);

    auto bufferData = network->buffer();

    auto frameData = bufferData->Get(0)->frame();

    int frmId = frameData->frame_id();
    auto payloadlength = frameData->length();

    std::cout<<frmId<<std::endl;
 printf("%d\n",payloadlength);

 std::cout<<frameData->rtr()<<std::endl;
 std::cout<<frameData->type()<<std::endl;

 std::cout<<bufferData->Get(0)->direction()<<std::endl;
  std::cout<<bufferData->Get(0)->canFD_enabled()<<std::endl;
   std::cout<<bufferData->Get(0)->status()<<std::endl;


   flatbuffers::Parser parser;
  bool ok1 = parser.Parse(schemafile.c_str());
  GenerateText(parser, builder.GetBufferPointer(), &jsonfile);
  printf("%s", jsonfile.c_str());

 std::ofstream myfile;
  myfile.open ("network.log");
  myfile << jsonfile;
  myfile.close();

  RegisterFileT regObj;
   GetRegisterFile(builder.GetBufferPointer())->UnPackTo(&regObj);
  auto buffer1 =  regObj.buffer.begin();
  std::cout<<"buffer1"<<std::endl;
  
    



 

 


}

