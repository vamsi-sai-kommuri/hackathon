// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_NETWORKMODELS_CAN1_H_
#define FLATBUFFERS_GENERATED_TEST_NETWORKMODELS_CAN1_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace NetworkModels {
namespace CAN1 {

struct MetaFrame;
struct MetaFrameBuilder;

struct RegisterFile;
struct RegisterFileBuilder;

enum CanFDIndicator : int8_t {
  CanFDIndicator_can = 0,
  CanFDIndicator_canFD = 1,
  CanFDIndicator_MIN = CanFDIndicator_can,
  CanFDIndicator_MAX = CanFDIndicator_canFD
};

inline const CanFDIndicator (&EnumValuesCanFDIndicator())[2] {
  static const CanFDIndicator values[] = {
    CanFDIndicator_can,
    CanFDIndicator_canFD
  };
  return values;
}

inline const char * const *EnumNamesCanFDIndicator() {
  static const char * const names[3] = {
    "can",
    "canFD",
    nullptr
  };
  return names;
}

inline const char *EnumNameCanFDIndicator(CanFDIndicator e) {
  if (flatbuffers::IsOutRange(e, CanFDIndicator_can, CanFDIndicator_canFD)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCanFDIndicator()[index];
}

struct MetaFrame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MetaFrameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CANFD_ENABLED = 4
  };
  NetworkModels::CAN1::CanFDIndicator canFD_enabled() const {
    return static_cast<NetworkModels::CAN1::CanFDIndicator>(GetField<int8_t>(VT_CANFD_ENABLED, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_CANFD_ENABLED, 1) &&
           verifier.EndTable();
  }
};

struct MetaFrameBuilder {
  typedef MetaFrame Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_canFD_enabled(NetworkModels::CAN1::CanFDIndicator canFD_enabled) {
    fbb_.AddElement<int8_t>(MetaFrame::VT_CANFD_ENABLED, static_cast<int8_t>(canFD_enabled), 0);
  }
  explicit MetaFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MetaFrame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MetaFrame>(end);
    return o;
  }
};

inline flatbuffers::Offset<MetaFrame> CreateMetaFrame(
    flatbuffers::FlatBufferBuilder &_fbb,
    NetworkModels::CAN1::CanFDIndicator canFD_enabled = NetworkModels::CAN1::CanFDIndicator_can) {
  MetaFrameBuilder builder_(_fbb);
  builder_.add_canFD_enabled(canFD_enabled);
  return builder_.Finish();
}

struct RegisterFile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RegisterFileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BUFFER = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<NetworkModels::CAN1::MetaFrame>> *buffer() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<NetworkModels::CAN1::MetaFrame>> *>(VT_BUFFER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_BUFFER) &&
           verifier.VerifyVector(buffer()) &&
           verifier.VerifyVectorOfTables(buffer()) &&
           verifier.EndTable();
  }
};

struct RegisterFileBuilder {
  typedef RegisterFile Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_buffer(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NetworkModels::CAN1::MetaFrame>>> buffer) {
    fbb_.AddOffset(RegisterFile::VT_BUFFER, buffer);
  }
  explicit RegisterFileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RegisterFile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RegisterFile>(end);
    return o;
  }
};

inline flatbuffers::Offset<RegisterFile> CreateRegisterFile(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<NetworkModels::CAN1::MetaFrame>>> buffer = 0) {
  RegisterFileBuilder builder_(_fbb);
  builder_.add_buffer(buffer);
  return builder_.Finish();
}

inline flatbuffers::Offset<RegisterFile> CreateRegisterFileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<NetworkModels::CAN1::MetaFrame>> *buffer = nullptr) {
  auto buffer__ = buffer ? _fbb.CreateVector<flatbuffers::Offset<NetworkModels::CAN1::MetaFrame>>(*buffer) : 0;
  return NetworkModels::CAN1::CreateRegisterFile(
      _fbb,
      buffer__);
}

inline const NetworkModels::CAN1::RegisterFile *GetRegisterFile(const void *buf) {
  return flatbuffers::GetRoot<NetworkModels::CAN1::RegisterFile>(buf);
}

inline const NetworkModels::CAN1::RegisterFile *GetSizePrefixedRegisterFile(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<NetworkModels::CAN1::RegisterFile>(buf);
}

inline const char *RegisterFileIdentifier() {
  return "NMCA";
}

inline bool RegisterFileBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, RegisterFileIdentifier());
}

inline bool SizePrefixedRegisterFileBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, RegisterFileIdentifier(), true);
}

inline bool VerifyRegisterFileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NetworkModels::CAN1::RegisterFile>(RegisterFileIdentifier());
}

inline bool VerifySizePrefixedRegisterFileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NetworkModels::CAN1::RegisterFile>(RegisterFileIdentifier());
}

inline const char *RegisterFileExtension() {
  return "can";
}

inline void FinishRegisterFileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NetworkModels::CAN1::RegisterFile> root) {
  fbb.Finish(root, RegisterFileIdentifier());
}

inline void FinishSizePrefixedRegisterFileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NetworkModels::CAN1::RegisterFile> root) {
  fbb.FinishSizePrefixed(root, RegisterFileIdentifier());
}

}  // namespace CAN1
}  // namespace NetworkModels

#endif  // FLATBUFFERS_GENERATED_TEST_NETWORKMODELS_CAN1_H_
