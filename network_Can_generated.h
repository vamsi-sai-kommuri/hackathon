// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NETWORKCAN_NETWORKMODELS_CAN_H_
#define FLATBUFFERS_GENERATED_NETWORKCAN_NETWORKMODELS_CAN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 10 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace NetworkModels {
namespace CAN {

struct CanStatus;
struct CanStatusBuilder;

struct TimeSpec;

struct MessageTiming;

struct Frame;
struct FrameBuilder;

struct MetaFrame;
struct MetaFrameBuilder;

struct RegisterFile;
struct RegisterFileBuilder;

enum BusState : int8_t {
  BusState_BusOff = 0,
  BusState_Idle = 1,
  BusState_Sync = 2,
  BusState_MIN = BusState_BusOff,
  BusState_MAX = BusState_Sync
};

inline const BusState (&EnumValuesBusState())[3] {
  static const BusState values[] = {
    BusState_BusOff,
    BusState_Idle,
    BusState_Sync
  };
  return values;
}

inline const char * const *EnumNamesBusState() {
  static const char * const names[4] = {
    "BusOff",
    "Idle",
    "Sync",
    nullptr
  };
  return names;
}

inline const char *EnumNameBusState(BusState e) {
  if (flatbuffers::IsOutRange(e, BusState_BusOff, BusState_Sync)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBusState()[index];
}

enum BufferDirection : int8_t {
  BufferDirection_Tx = 0,
  BufferDirection_Rx = 1,
  BufferDirection_MIN = BufferDirection_Tx,
  BufferDirection_MAX = BufferDirection_Rx
};

inline const BufferDirection (&EnumValuesBufferDirection())[2] {
  static const BufferDirection values[] = {
    BufferDirection_Tx,
    BufferDirection_Rx
  };
  return values;
}

inline const char * const *EnumNamesBufferDirection() {
  static const char * const names[3] = {
    "Tx",
    "Rx",
    nullptr
  };
  return names;
}

inline const char *EnumNameBufferDirection(BufferDirection e) {
  if (flatbuffers::IsOutRange(e, BufferDirection_Tx, BufferDirection_Rx)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBufferDirection()[index];
}

enum BufferStatus : int8_t {
  BufferStatus_None = 0,
  BufferStatus_RxError = 1,
  BufferStatus_MIN = BufferStatus_None,
  BufferStatus_MAX = BufferStatus_RxError
};

inline const BufferStatus (&EnumValuesBufferStatus())[2] {
  static const BufferStatus values[] = {
    BufferStatus_None,
    BufferStatus_RxError
  };
  return values;
}

inline const char * const *EnumNamesBufferStatus() {
  static const char * const names[3] = {
    "None",
    "RxError",
    nullptr
  };
  return names;
}

inline const char *EnumNameBufferStatus(BufferStatus e) {
  if (flatbuffers::IsOutRange(e, BufferStatus_None, BufferStatus_RxError)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBufferStatus()[index];
}

enum FrameType : int8_t {
  FrameType_standard_frame = 0,
  FrameType_extended_fram = 1,
  FrameType_MIN = FrameType_standard_frame,
  FrameType_MAX = FrameType_extended_fram
};

inline const FrameType (&EnumValuesFrameType())[2] {
  static const FrameType values[] = {
    FrameType_standard_frame,
    FrameType_extended_fram
  };
  return values;
}

inline const char * const *EnumNamesFrameType() {
  static const char * const names[3] = {
    "standard_frame",
    "extended_fram",
    nullptr
  };
  return names;
}

inline const char *EnumNameFrameType(FrameType e) {
  if (flatbuffers::IsOutRange(e, FrameType_standard_frame, FrameType_extended_fram)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFrameType()[index];
}

enum CanFDIndicator : int8_t {
  CanFDIndicator_can = 0,
  CanFDIndicator_canFD = 1,
  CanFDIndicator_MIN = CanFDIndicator_can,
  CanFDIndicator_MAX = CanFDIndicator_canFD
};

inline const CanFDIndicator (&EnumValuesCanFDIndicator())[2] {
  static const CanFDIndicator values[] = {
    CanFDIndicator_can,
    CanFDIndicator_canFD
  };
  return values;
}

inline const char * const *EnumNamesCanFDIndicator() {
  static const char * const names[3] = {
    "can",
    "canFD",
    nullptr
  };
  return names;
}

inline const char *EnumNameCanFDIndicator(CanFDIndicator e) {
  if (flatbuffers::IsOutRange(e, CanFDIndicator_can, CanFDIndicator_canFD)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCanFDIndicator()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) TimeSpec FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t psec10_;

 public:
  TimeSpec()
      : psec10_(0) {
  }
  TimeSpec(int64_t _psec10)
      : psec10_(flatbuffers::EndianScalar(_psec10)) {
  }
  int64_t psec10() const {
    return flatbuffers::EndianScalar(psec10_);
  }
};
FLATBUFFERS_STRUCT_END(TimeSpec, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) MessageTiming FLATBUFFERS_FINAL_CLASS {
 private:
  NetworkModels::CAN::TimeSpec send_request_;
  NetworkModels::CAN::TimeSpec arbitration_;
  NetworkModels::CAN::TimeSpec reception_;

 public:
  MessageTiming()
      : send_request_(),
        arbitration_(),
        reception_() {
  }
  MessageTiming(const NetworkModels::CAN::TimeSpec &_send_request, const NetworkModels::CAN::TimeSpec &_arbitration, const NetworkModels::CAN::TimeSpec &_reception)
      : send_request_(_send_request),
        arbitration_(_arbitration),
        reception_(_reception) {
  }
  const NetworkModels::CAN::TimeSpec &send_request() const {
    return send_request_;
  }
  const NetworkModels::CAN::TimeSpec &arbitration() const {
    return arbitration_;
  }
  const NetworkModels::CAN::TimeSpec &reception() const {
    return reception_;
  }
};
FLATBUFFERS_STRUCT_END(MessageTiming, 24);

struct CanStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CanStatusBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SYNC = 4
  };
  NetworkModels::CAN::BusState sync() const {
    return static_cast<NetworkModels::CAN::BusState>(GetField<int8_t>(VT_SYNC, 1));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_SYNC, 1) &&
           verifier.EndTable();
  }
};

struct CanStatusBuilder {
  typedef CanStatus Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sync(NetworkModels::CAN::BusState sync) {
    fbb_.AddElement<int8_t>(CanStatus::VT_SYNC, static_cast<int8_t>(sync), 1);
  }
  explicit CanStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CanStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CanStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<CanStatus> CreateCanStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    NetworkModels::CAN::BusState sync = NetworkModels::CAN::BusState_Idle) {
  CanStatusBuilder builder_(_fbb);
  builder_.add_sync(sync);
  return builder_.Finish();
}

struct Frame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FrameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FRAME_ID = 4,
    VT_PAYLOAD = 6,
    VT_LENGTH = 8,
    VT_RTR = 10,
    VT_TYPE = 12
  };
  uint32_t frame_id() const {
    return GetField<uint32_t>(VT_FRAME_ID, 0);
  }
  const flatbuffers::Vector<uint8_t> *payload() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_PAYLOAD);
  }
  uint8_t length() const {
    return GetField<uint8_t>(VT_LENGTH, 0);
  }
  bool rtr() const {
    return GetField<uint8_t>(VT_RTR, 0) != 0;
  }
  NetworkModels::CAN::FrameType type() const {
    return static_cast<NetworkModels::CAN::FrameType>(GetField<int8_t>(VT_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_FRAME_ID, 4) &&
           VerifyOffset(verifier, VT_PAYLOAD) &&
           verifier.VerifyVector(payload()) &&
           VerifyField<uint8_t>(verifier, VT_LENGTH, 1) &&
           VerifyField<uint8_t>(verifier, VT_RTR, 1) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct FrameBuilder {
  typedef Frame Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frame_id(uint32_t frame_id) {
    fbb_.AddElement<uint32_t>(Frame::VT_FRAME_ID, frame_id, 0);
  }
  void add_payload(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload) {
    fbb_.AddOffset(Frame::VT_PAYLOAD, payload);
  }
  void add_length(uint8_t length) {
    fbb_.AddElement<uint8_t>(Frame::VT_LENGTH, length, 0);
  }
  void add_rtr(bool rtr) {
    fbb_.AddElement<uint8_t>(Frame::VT_RTR, static_cast<uint8_t>(rtr), 0);
  }
  void add_type(NetworkModels::CAN::FrameType type) {
    fbb_.AddElement<int8_t>(Frame::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  explicit FrameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Frame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Frame>(end);
    return o;
  }
};

inline flatbuffers::Offset<Frame> CreateFrame(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t frame_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> payload = 0,
    uint8_t length = 0,
    bool rtr = false,
    NetworkModels::CAN::FrameType type = NetworkModels::CAN::FrameType_standard_frame) {
  FrameBuilder builder_(_fbb);
  builder_.add_payload(payload);
  builder_.add_frame_id(frame_id);
  builder_.add_type(type);
  builder_.add_rtr(rtr);
  builder_.add_length(length);
  return builder_.Finish();
}

inline flatbuffers::Offset<Frame> CreateFrameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t frame_id = 0,
    const std::vector<uint8_t> *payload = nullptr,
    uint8_t length = 0,
    bool rtr = false,
    NetworkModels::CAN::FrameType type = NetworkModels::CAN::FrameType_standard_frame) {
  auto payload__ = payload ? _fbb.CreateVector<uint8_t>(*payload) : 0;
  return NetworkModels::CAN::CreateFrame(
      _fbb,
      frame_id,
      payload__,
      length,
      rtr,
      type);
}

struct MetaFrame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MetaFrameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_DIRECTION = 6,
    VT_CANFD_ENABLED = 8,
    VT_FRAME = 10
  };
  NetworkModels::CAN::BufferStatus status() const {
    return static_cast<NetworkModels::CAN::BufferStatus>(GetField<int8_t>(VT_STATUS, 0));
  }
  NetworkModels::CAN::BufferDirection direction() const {
    return static_cast<NetworkModels::CAN::BufferDirection>(GetField<int8_t>(VT_DIRECTION, 0));
  }
  NetworkModels::CAN::CanFDIndicator canFD_enabled() const {
    return static_cast<NetworkModels::CAN::CanFDIndicator>(GetField<int8_t>(VT_CANFD_ENABLED, 0));
  }
  const NetworkModels::CAN::Frame *frame() const {
    return GetPointer<const NetworkModels::CAN::Frame *>(VT_FRAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           VerifyField<int8_t>(verifier, VT_DIRECTION, 1) &&
           VerifyField<int8_t>(verifier, VT_CANFD_ENABLED, 1) &&
           VerifyOffset(verifier, VT_FRAME) &&
           verifier.VerifyTable(frame()) &&
           verifier.EndTable();
  }
};

struct MetaFrameBuilder {
  typedef MetaFrame Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(NetworkModels::CAN::BufferStatus status) {
    fbb_.AddElement<int8_t>(MetaFrame::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_direction(NetworkModels::CAN::BufferDirection direction) {
    fbb_.AddElement<int8_t>(MetaFrame::VT_DIRECTION, static_cast<int8_t>(direction), 0);
  }
  void add_canFD_enabled(NetworkModels::CAN::CanFDIndicator canFD_enabled) {
    fbb_.AddElement<int8_t>(MetaFrame::VT_CANFD_ENABLED, static_cast<int8_t>(canFD_enabled), 0);
  }
  void add_frame(flatbuffers::Offset<NetworkModels::CAN::Frame> frame) {
    fbb_.AddOffset(MetaFrame::VT_FRAME, frame);
  }
  explicit MetaFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<MetaFrame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MetaFrame>(end);
    return o;
  }
};

inline flatbuffers::Offset<MetaFrame> CreateMetaFrame(
    flatbuffers::FlatBufferBuilder &_fbb,
    NetworkModels::CAN::BufferStatus status = NetworkModels::CAN::BufferStatus_None,
    NetworkModels::CAN::BufferDirection direction = NetworkModels::CAN::BufferDirection_Tx,
    NetworkModels::CAN::CanFDIndicator canFD_enabled = NetworkModels::CAN::CanFDIndicator_can,
    flatbuffers::Offset<NetworkModels::CAN::Frame> frame = 0) {
  MetaFrameBuilder builder_(_fbb);
  builder_.add_frame(frame);
  builder_.add_canFD_enabled(canFD_enabled);
  builder_.add_direction(direction);
  builder_.add_status(status);
  return builder_.Finish();
}

struct RegisterFile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RegisterFileBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_DIRECTION = 6,
    VT_CANFD_ENABLED = 8
  };
  NetworkModels::CAN::BufferStatus status() const {
    return static_cast<NetworkModels::CAN::BufferStatus>(GetField<int8_t>(VT_STATUS, 0));
  }
  NetworkModels::CAN::BufferDirection direction() const {
    return static_cast<NetworkModels::CAN::BufferDirection>(GetField<int8_t>(VT_DIRECTION, 0));
  }
  NetworkModels::CAN::CanFDIndicator canFD_enabled() const {
    return static_cast<NetworkModels::CAN::CanFDIndicator>(GetField<int8_t>(VT_CANFD_ENABLED, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           VerifyField<int8_t>(verifier, VT_DIRECTION, 1) &&
           VerifyField<int8_t>(verifier, VT_CANFD_ENABLED, 1) &&
           verifier.EndTable();
  }
};

struct RegisterFileBuilder {
  typedef RegisterFile Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_status(NetworkModels::CAN::BufferStatus status) {
    fbb_.AddElement<int8_t>(RegisterFile::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_direction(NetworkModels::CAN::BufferDirection direction) {
    fbb_.AddElement<int8_t>(RegisterFile::VT_DIRECTION, static_cast<int8_t>(direction), 0);
  }
  void add_canFD_enabled(NetworkModels::CAN::CanFDIndicator canFD_enabled) {
    fbb_.AddElement<int8_t>(RegisterFile::VT_CANFD_ENABLED, static_cast<int8_t>(canFD_enabled), 0);
  }
  explicit RegisterFileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<RegisterFile> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RegisterFile>(end);
    return o;
  }
};

inline flatbuffers::Offset<RegisterFile> CreateRegisterFile(
    flatbuffers::FlatBufferBuilder &_fbb,
    NetworkModels::CAN::BufferStatus status = NetworkModels::CAN::BufferStatus_None,
    NetworkModels::CAN::BufferDirection direction = NetworkModels::CAN::BufferDirection_Tx,
    NetworkModels::CAN::CanFDIndicator canFD_enabled = NetworkModels::CAN::CanFDIndicator_can) {
  RegisterFileBuilder builder_(_fbb);
  builder_.add_canFD_enabled(canFD_enabled);
  builder_.add_direction(direction);
  builder_.add_status(status);
  return builder_.Finish();
}

inline const NetworkModels::CAN::RegisterFile *GetRegisterFile(const void *buf) {
  return flatbuffers::GetRoot<NetworkModels::CAN::RegisterFile>(buf);
}

inline const NetworkModels::CAN::RegisterFile *GetSizePrefixedRegisterFile(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<NetworkModels::CAN::RegisterFile>(buf);
}

inline const char *RegisterFileIdentifier() {
  return "NMCA";
}

inline bool RegisterFileBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, RegisterFileIdentifier());
}

inline bool SizePrefixedRegisterFileBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, RegisterFileIdentifier(), true);
}

inline bool VerifyRegisterFileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NetworkModels::CAN::RegisterFile>(RegisterFileIdentifier());
}

inline bool VerifySizePrefixedRegisterFileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NetworkModels::CAN::RegisterFile>(RegisterFileIdentifier());
}

inline const char *RegisterFileExtension() {
  return "can";
}

inline void FinishRegisterFileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NetworkModels::CAN::RegisterFile> root) {
  fbb.Finish(root, RegisterFileIdentifier());
}

inline void FinishSizePrefixedRegisterFileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<NetworkModels::CAN::RegisterFile> root) {
  fbb.FinishSizePrefixed(root, RegisterFileIdentifier());
}

}  // namespace CAN
}  // namespace NetworkModels

#endif  // FLATBUFFERS_GENERATED_NETWORKCAN_NETWORKMODELS_CAN_H_
